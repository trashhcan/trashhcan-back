
# dev 브랜치 전용 배포!!

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: [dev] Java CI/CD with Gradle

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  build-docker-image:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Write secrets to application-SECRET-KEY.properties
      run: |
        touch ./src/main/resources/application-SECRET-KEY.properties
        echo "database-host=$DB_HOST" >> ./src/main/resources/application-SECRET-KEY.properties
        echo "database-name=$DB_NAME" >> ./src/main/resources/application-SECRET-KEY.properties
        echo "database-user=$DB_USERNAME" >> ./src/main/resources/application-SECRET-KEY.properties
        echo "database-password=$DB_PASSWORD" >> ./src/main/resources/application-SECRET-KEY.properties
        echo "google-client-id=$GOOGLE_CLIENT_ID" >> ./src/main/resources/application-SECRET-KEY.properties
        echo "google-client-secret=$GOOGLE_CLIENT_SECRET" >> ./src/main/resources/application-SECRET-KEY.properties
        echo "google-redirect-uri=$GOOGLE_REDIRECT_URI" >> ./src/main/resources/application-SECRET-KEY.properties
        echo "kakao-client-id=$KAKAO_CLIENT_ID" >> ./src/main/resources/application-SECRET-KEY.properties
        echo "kakao-client-secret=$KAKAO_CLIENT_SECRET" >> ./src/main/resources/application-SECRET-KEY.properties
        echo "kakao-redirect-uri=$KAKAO_REDIRECT_URI" >> ./src/main/resources/application-SECRET-KEY.properties
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_NAME: ${{ secrets.DB_NAME }} 
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        GOOGLE_REDIRECT_URI: ${{ secrets.GOOGLE_REDIRECT_URI }}
        KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
        KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
        KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
    
    - name: Upload application-SECRET-KEY.properties
      uses: actions/upload-artifact@v4
      with:
        name: application-SECRET-KEY.properties
        path: ./src/main/resources/application-SECRET-KEY.properties

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Build with Gradle Wrapper
      run: ./gradlew build

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #   with:
    #     gradle-version: '8.9'
    #
    # - name: Build with Gradle 8.9
    #   run: gradle build

    - name: docker image build
      run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/trashhcan .

    - name: docker login
      uses: docker/login-action@v2
      with: 
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: docker hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/trashhcan-dev

  deploy-docker-image-to-ec2:
    needs: build-docker-image
    runs-on: [self-hosted, test]

    steps:
      - name: Docker pull
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/trashhcan-dev

      - name: Stop existing Docker containers
        run: sudo docker stop $(sudo docker ps -q) 2>/dev/null || true

      - name: Run new Docker container
        run: sudo docker run --name trashhcan-dev --rm -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/trashhcan-dev

      - name: Delete old Docker image
        run: sudo docker system prune -f

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
